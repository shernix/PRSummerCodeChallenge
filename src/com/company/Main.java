package com.company;

import java.util.ArrayList;

public class Main {

    public static void main(String[] args) {
        String s = "AUGCGGUGUUCUCUCCAAGAAACAUGUCCAGCCCUUCGACCGUCCGGUGCCGGGCAGCUAGAUCAGCCCGCAUGCAAAGACACCGUGACUCACAAACGCCGUAGUCGCUAUUGUGAGGCCACAAUAGACCUGGUCGAAACACUUUAUCCUCAUCUAGCGGUCGCUGACGCUAGAGGUUCCGGAAAUUCUAUGCUAGGCGGACCAGUCAUCAGGCUGCUCCCCAAUACUUUGAACAAACCAAGACUACGAUCUGACAACGUAACGACCUCAACUACGACAGUCUCGACACCCAGUGUUGUGACUAAACUUUCAUAUGGAAAUAAGCCUACCACCGGUCGAACUAGCGUCUUAGAUGCCUUUUUAAGGUCUUCACUAUCGGCCAAGAAUGAUAAGCGCCAUUGCCUCUAUGCAACUCCUACCACACGGGACGCAGCGCGAUAUAGGCAGAGGAAAUGUACUGUGAGCUCCAAGAUUCGGGCUGGUAUAUGCUGGGGGCUGAGUAAUGUGCCCCGUAGAGAACCAGCCCUUUAUGCCGCCGAUGGCUGGCUGCCUGGGGCUGUUGAACCACCGUAUCAUGUCUUUUACAUGGUCCCACUAGCCAUCAGGGACUGCGCUGUCAUCGUGCUAAUCUGUGAAUAUUACACGAUAGGUAUCGUCUGUAUAUUCCGCGUGAAAGUGCAUAUACUGAUACACCUAAGUUUAAUGACAAAAGGCGAUUCUGGAUUUCCUAAGAUCAUACCGGCCGGACAACGACUGGGAUUUGCCCAUCUGGUUUGUAUCCCUUCCGCGAAUAAAAUGAGGACAGGCCUCGGUCGAACUCCUUACUCGCGCGCAUCUUGCCUAUCCGGUCCGUUGCCAUACCUGCCCUUGAGGGCGUCUAAGCCAGGCACAAACGGGUCAGCCAUUAUUUUAAAUCUAUUCAGGCUCCGCCCCAAUACUAAAAAUACCCUCGCUACAUUAUCGGGAAAGGUCCUAAAGCUUUUCAUCCCCGGGAGCUUGCUCGCGAGGUGUUUAAUCCGGUCACCAUCUUGGUGCAUUGCUCGAUUUACGCUUCAGCACUUGACGGGAAUAUAUAAGUUCCUAACCAAGCGACUGAUUAUUUGCUGGAUUGCUCCCCAAAGAACGGGGCAGCGAUUUCGACUUCCGCUGAAAGGGGGUCCUAAAUUGAGCGCAGCCAAAGCAAGUUUCCCUGUCUUUAAGAACAUAUGCGUCUGCUCCGGACACAGAAAAGAUCUAACAGUUGACGCGCUAGUGGUAGUUAACACCGUCCGUCCGACGACAAUUCGUACUUACACAAGUGCAGACGUUCACCCCUCACUAAACUUGCGUAUGAAGCGCUCGUCGCCCCAGGUAACUCCUCCAACGAUAUUUAGCGCUGACAUUCAUCCUGUGACGGCGCGGGGCAACUUCGAAAAGGUACUCGCCCCCCUGCCUGACGAAGACGUUCAUCUGACGCUGAACCGAAUAUGGUCCAGACGCUACCACCUUAUUUCUGAAAAAGUUCUGUACAACCCAUGCGGGGCAGUAACCACUCAUAGGAAGGCUGGACGAUUCGGUCAACGUCUGUACCCGCAGAAGUUCUUUGACGUAAACUCAACACCGCUGCUAGUACUUAUGUAUACUUACCUCUGGGGCUGGCGACAAUCGGUUAUAAUACGCUAUAUCGGUCAUAAUGCCGGGAUGAUAUAUCAUGUACUCUCGACCAUUGACAGGUUAGACCCUUGUGUAGUCAUCGCACCAACGAGUCUACAGAGUCUUGGAUGGGGUUUUCCAAUCUGGGUAAUGGACGAUUAUGGAUAUCAAAGGUCGAAGAGUAGCCUACGCCUCCAUUAUAGAAAUACCCGGGGUAAUUGUCGAUUCCAAAAUAAGCAGGUAGUUAGGGAAACACGUUCACUCCUUCUACUGAGAACAGGAAACAAGAAAGCCACUACUGCGGCAAGUGGAGCGAUCCGUCCAAAGACGCUCACCCCGCUCUCUAUUGGUGGUGGCGAAGUAACAAUCAGAAACCCUAACUUGAUAAAAGGAUCGAAGAGAAGGAUUACGCGGUACCGUUCCUCAAUGCCCAGAAGUGACUUUUAUGUAUGGAUGCAGACCCUCCGAAGUUCCAUAGUUCUCAGUACGACUACUGGGGGAUCUGCUGUACGUUACCAAGUGGGUCUAAGUGAGCGGCGGAUUCCAGACCUUUCACUAGCAGAGCACAACCGGUUUAUCAGCGUUACUCAUUGUAAUCCUUCUCGGGUGUCAGACUUUUUCAUCGCUCCGUCGUCAAGUGCCCGAUGUGGCAUAUAUUUUGUUUUAAAUACCGUAGGGGUGUUCUCAACACUCAGUACACCUAGGAUUGUAAACUCGAUCGAUCGCUGCUCUCUAGAAUUUUGCCAGGGUCAAGAUAUCUGGGCCGAGCUGCGUCGGGUAACUUGCGACUCGGGCUGGUUAAUACUCCGCUCUGGGAUCUUGGUAUACUGCAGUCGGCUGAUCGUAACUCCUAUUCGACUGUUCUCUGGCUAUAAAUUACAGUCAUGGAAUGAACUCAUGAAUAAACAACGGGCUCCCUCGGAUCUCUCUCGUCUUAUUAUUCGCUUAACUUCUGAGAGAGAGGAGGCCAAUCCAUUAGUGUUAGUACCAUCGACUCGCCUGGCAAGGCUGGCUUCAAUGCAUCGACGUGUUAUGGGUACCCUGGGUGAGUAUUCACGACGUAGUAGAGUUGGUUUAAGUCGGGUGCUCGCCCUAGCUAAGCUCAACCGAGACUUCUCUCCUUCUCAAAAGCCCUUGUCUUGUACAGUGAUCGACGCGCUGCAAGGGUACGAUUCGUUACCUAGCGGAACAGGGAACUCACCCGUAAAGUAUUUCAACGUGAUGAAUCUCGAGACACCGAAUACGAAUAACGCACACGCGCCCACUUGUUUCCCAUUGCUGGUUCUCUCAUCCCGUGCCACAUUUUGGCCAAUUAAGUAUUUUACGCAUGUGUCACACGUCGGCCCGCACUGGAUGGAUCGGCUCAGUAUUAUAAGCAUUAUCUGCCACCACGAUCUAUCUCAGACCCGAGCAUGGCCGCACCCGUGGUACGCUUGUUAUACGGGCAUACUGUGCACUCUUGGCCCUCUCCCCUCCGGCCCGGAAAGGCACGCGGACGUUGUCUCUACACGUAGCGUAGGUCUUCGCGGUCUGUAUCAUCUGUCUCUGACUGUUACCACUCGGCGCAUAUUUUGUUGGGCGAAGGGGAACCCCCCUAACACAGCACUGCACUCCCACUAUGCGGACCGAGACACCAGGCAGAUCCCAAGACGGAUAGGUGGUGGUAUCGGUGAGAAUCUCAAAGGGCUAGGAGCGUGCAAAGCAGAGAUAUCUGUUGUGACGGAUCAUGACAACAGGCUACGCUCGAGACAUCACCAGGGGAGAAAUCCUAAGCCCAGCGCAGCUACACGUGUGACAGAACAGCCAGUUUUCGUUACAGAGCAUACCUGCGGUUCGGUGUGCCCGAAUCUACAACCAUAUGCCGUACGUGCUAGAGAGAUCGGUAACUCUAGAGCCAAAUCAAAACCUCUGGGCGAAGAUGUCUUGAGUAUGUUCGAUAACCAUCCCUCGGCCCCGACUGGGCCCCAAUACAACUCAUGCUGGGCUCCCGGACCUAUCAUAGAUAGACGUGUACCUGGCAGUCAAGUGGGGAAGUACUUAACUACACUUGAAUAUUCAUCAUCAUUCAGAGUAGGUUUUAGAUCGCCGGUUUGUUUGGAUUUGUGCGGUCCGUUUGAGACUUCCUUGUCUGGCAUUGGGCGGGGGUCAGCUAAAUGCCGUGAGCCUUUACAAGCCACGGUUGGUUUUAGCCGAGAUAAUACGAGGGAAGCCGUAACCGAACAACUGGAGCCAUGUGGACAAGAAUUGAGAUCCGAGCUCAUGGCCGGGUGGAGUCGAGCGCGGCCUGCCCAUUUUCCCCGACCCCCCCGUGUCUUCUGCCCCGUCCUACUAAGAAGCGGCGUCUGUAAUCAUUUAAGGAUACUUAUGCUACCGGGAUUUUGUAACAUUCACCUCGCUCUCCCGUACAUAAUGAAUCCAGAACCCCUAUCUAUCAUAACAGCGCAUUUCAGACUAACAGUGUACAAAAAGAGGCAGGAGCAGAGCUUAACCUGCGAGAUGUUACCACAGGCUCCGUCGUGUUUCUCCAAGACUUUGAGCAUCAUCAGAGUCUUGAUGGAUUCACGGUCAUAUAACCUGAGGCUCGUUUGUCGCGGGGAUUCCAUAUUGGUUAACGUAUCAGAGGACUCAGCCACAAAUUCGAGAAAAUCUAGGUCCGAUCGUGCGUGGUACCGUAUAAACCAAGCAAGGUCCCUUUCUCGGAUGCUUAAAAUAGUGAACAGCGGGGAUACAUCUAAAUCCGUGGGCUCAGAUUCAUCCGCUGAGAACAGUUGUCUCAGAUUAACGGGCCCAGAGCCCGACCGCACGCUGGUUUGUUCCCCGAUCAAUGUGAACAUAGGUGCUACGCCUAUCAGCAGGCCCUGGUUCACAUUAAUUAACAGGGCGCUAUGCCAAGACCCGCUGCAGCGGCCUCUAAAGUACAAGAAUAAAUUACGCCCUACCUUUGACAUUGUGCAAGGGGAGGCGCGGAGCGAGGCUAGAACACGCUUAUGCGGACGAGGCUGUCAAAUACAGACCGUCACCAUGACACCCGUCAUCAGUUGGCCGGGGGUAUCGCUCCCCCCUGAGGAUCCAGAGUCAGAUAACCUAGCGAGCUUAGAUAGGACCUCAACCCCUCGAGACGUAUACGAUAGCCCCAUCCCACACUUGUGGGCAAAGUAUACUAGCUUGCAGAGAAAACCUCCAACCCUGAUGAGUGGGUUCAUAUGUGUCCAGAGCGAAGUGUUAACUCGUGGUAAAGCCGCUAGUCGACUAAUCAAAAAAACCAAUAUUCAGACCGGCUGUGUCUACAUGAAAUAUCGCGGCAAGUGUCUGGCAGUUUAUAGCUCCUGCGCCCGACUCCAGGCCGGUAGGGCUAAUCCUACGUUGUUGCACGCAAGUGUCUAUGCGGAAAGGGGACUCCUUUUGUGCAAAAUCCCCCCCUUCAGCGUCAUGCCCUUCACUCGCUUGCUGAGACAUUAUCAGCCUAUGCGUAGCGUAUCUGUUAUUCAAUUGAAAAGAAUUCUUAACGUUGGACCCCUGACAUCGCCCGGGUGUCCAUGCCACACCUUAUGGGUAUCUACUUCCCGCAAAAGACAUAGCGGACGUCAGGAAUAUACGACCCAAGGUGGCAAGAAAGUAUCUAAAGCGACCUACACUCGGCCCGCGCCAUCACUUGUCUCGGUGAUUGCUUUCGAUUUGCAAAUCUCUAAAUCUGUUCUGUUUAGAUUAACAUGCCAUGUGAGUCACAGCCAAUGCGAUGUCAACAAGGAAAACCCCACGUGUUCUUGUGUUCUGCCCUGGGCCGUCCGGAACUGGAAAACGGGACGGUACGGGCAACUUAUGACUUCUACUAACUACUCCAAACGGCGGUUCAAACCACGACGAGGCUGGUACGUCAGACUCCUCGGGAUGACGAGACAAUCAUCACUAGCACCCGGGAAGGUACGUAGUCAGAUGUCCCGUAAAAGUGUUCACACAUUUCUGUGUACAUGUCCUCGCUGUCAAAAAGCAUCGCAGCUGCUAGGCGUCAACCCACCCAUUGCUAGACGGAGCACGUGUAAGAGUUGUCUGGAUCUCGUAACUAACUUCGACCCCUAUGUCGCUAAAAUAUCCAUACCCCCUACCACACUGCACUUCAUAACGAACCGAACGCUUUUUGGUACGUGCCAAAUAACAUGUACAUGUGCAUCGUUUCCAAGCGAACGCAACGAGGGGGGCCGAGUCGAUCUGAACUCAUUACACACAGAGAAACUACUAUCCUAUAAUGAAUUAGUACCGGAUUGUAUACCAGUAUCCUCAGCCCACAGCGGUUUAAAUGCUUUAAUUCGGGAGUGUGCAAAGUACACGCGGGGGUCCACGUCUGGUCGACGGAACGAGGUAGAACGGAUAGAAGCAGAGCCCACUACGCGGGCACUACUCUCUGCAGGUGAAGCUGAUCACCUCGGUCCCUGGAUAUUAGCUGAGACGUCACCAGAUGUUACCAAGCCAGAAGUUUCGAAUUUCGGAGGGCCGCGAUCCGCCGGGUGGUUCCGUCUCUCGCAAAAACAUCCACUCGCCACUGAUGACACACUAAGGACUACCCCUGGUCUUGUGGUAUUACCUCUUAUUGGGUAUACGUAUUGGCGUUCACUCGUAGAAGAGACGUCCCUGCAUCGGGCAGCUUCCCAUUGGAACCUUGGCGUACCUGCGUGCUCUCGCCGGGUGGUUUCGACAGCACCCUUAUGCUGUAUCUCUCUGCGCUUUGGCUUGCCUAGAGAAAUCAGUCAGUUUCCCACACCAGAGGCAGUAAAAAGUCAACUAAGUAUGGCUCACCGACUCCCGAGCCUCUGGGAGAACUGCCCUCAGGAACUGUCACUACAUACGCUGUCCUGUCCAUCUCGCCCCUCUCACCUCAAUGUGGCCGCGUAUAUAAUACAUUAUGGCCUGUUUACAAUUCAAAGGCAGCGCAGCGACGCCACAUACAAUUGGACCGAGUUUCAAGCGACUCUGGAUAGGAAUAGAAAAUCUCAGCCUGGUUUAGGAGCCUCGCCUUCUACGAUCUGGAGUCUGCGGCUAUUCCUUGUCCAAAAGUGUAAGGUAGGGCUUCUUCCUUUUAAAAUUCCGCGUCGUAUCUGCCCCAGGAACCCAUUAUACUUAAGCAGCCACAUUUGCCGUCUGGGACGUAUUCCAUCAGCGGCAUGCACCGCGCGGCAUAUGAGACACAUUGUGGGUAAUUCACGCCUGCCCUCAAUAUUGACUAUCUUCAUGAGCUGGACCUCGCAGGAACCGCGGGUGUACAUUCCUAACCGUACUAACCAAAUGUCCGAGACUCGGCUUACUAUAUACCCUUACGCACAACGCCGAUUACGUAUGAUAUUCAGUGUACUUAGUAAUGCCACCUUCGAGAUGACUAGUGCAAGCAUAAGGUUAUUUUUCCAAUACCUUUUAAAUACCGCAACAUCAAUCACACAUGGUGUGCUGAGAGAGAUAAAUUCGUCACUCUUAUCCUGUCACCUUUCUAUACGUUGCCGCUCACGCGCCCUGAUGACAAGCCUAGCCGGGGAGCCAUCAACUAUAGACCGCUCCCGAGUGGACCCCAACUCGACGAGCUCUAUACCUAGGACAGUUACUGGGGCGAACUAUAAAUGGAAGGCGACGCCGUCAGAUGUAAACACCCACUCGGAUGUCCAAAGUGCGUAUCAAUACCCAACUAGGUCAGAAGGGUUUUUCCCUACGCAUAUGAAGGUUAUAGCUAUAUCUUUCGAAUUGGAGACUCGGUCGGAUAGAGUGGUUUUUGCGAACCACCCGUUUAAUUGCCGGAGUGGCCCCUUGGCUCUUCUCGGCCAGCUACCCGCCGGAAGUUCCAUCUGUUCACCGCUGCCGAACUACAUUCUGCUUGCCAACGCGCCAGGGCGGGACAUGAAUCGGUCUUUCUUCCUCACUCACUUGCAUGACGGUGGAUUGUUAGUUGUCGCCCGGACUCCUCGUGCUAAUGCGGAUAACCCCCGGUCAUACCUAUUUUUAACCUCCCAGUGCUAUAGUCGGUCCCGCAUCAUAACCGUCUUCUCGUCGACCUACCAAUUAAGUUCUUCAUUAAUCAUCGCCCUAGUAUUUGCUACGACGCCGUUGUCUAUUGGUUUACCAAGUGGACCAAUGAGUACCGCGUGCGUGGGCGCUAGAUCUGCACUCCGAGUAAGGGCUAUGAAGCUGCGAGACAUGCAUCAGCUCUUGCAGGUCCCUCACCUAUUAUCCCCUGCUUUAAUUCCUGUUUUGGCAGAUCGGCGAACAGUCGUGUUUAGAUUACGAAGUCGAUUACAUUGGUACCUGUCACACUUAAAUCCUAUUAGCGAAAAGCGUCUUCUGGAUAAAAGCCACAUGGCGCUACCGUGCUGCACCGCCGGGCCUAAAAUCGCUUUGCUUAGAGACUGCGAAUCCAAAUAUAAUGGCUGUUCACUUAUUUCCUUACCAUUCCCGACCAGGCAUUCUCAGGCUCAUUCCAGUUCCGCGACUACAAGGAACCACGGGGCACGUAAUCUUCGGCGUACCCCCCUUCUGCGCCGACUUGCGCUACACUCAUUUCGUCGUGGUUGUUCCGUACGCAAGGACGGGUAUGCGGUAGGAUUCCUGUCUUGGCUCUGGUCAUGGGUUUUUCUCACGGUAUAUGAUGGAAGACUCACGGGCAUUUGCCUAAGCCUCGAAUACGUAGCCCAACGAGCGUAUCUUUCAAGCUACUUUCUGAACGAAACCUUCGCUUACGCACACUUGGACUCAUUUGGUGAGCCCACUUCAAUAAACGUGAAAUACCGGCACGGAUCUCAAGUGCGAAUGGGCAGUUUUACGUCGCACCGUAGAUUGAUGGACUCUGCAGGGUUCAUGUACCUCAUCCUUGGGCCCCACUCCCGCCUGUAUCAGGUCCUAUGGUCUACUCUCGGCAGUACCCCUCUGAGGGGUCUCGAGGGGCGUAGAACACCAGAGUACCUUAUACCCUUGAAUUUUUACAGUACCCUCGGAGUACGCCGUUCCACGAGCCACAGUCGUGUUUUCCGGGGAAGGGGCUUGGCUCGUGUCAGGAGAAAGACUCGUGUAAUCCGCUCGCCCGGGCAAGCGCGGCCUCAAGGCUUACAGUGUCUCCGGACAUGCGAAGUAUUGAUGCACCAUCCGGGAUUUUAUGUUCACUUUUCGACUCUGUAUCAUCACUUGAUGAUGGACAACCAUACAUCCGAUGCCCGAAAUUUUGCCUCCCCGUUUUCUAGGCCAGCAGCGGGUACGCACUGGACGCUAAAGGACGAGUCGAGCAAGACGGGGGACGGCAGCAUUGGGAUAUUCCAUAGAGAUCAAAAGCAAAAAUUAGGUGAAGUAGGUCGGAUCCGGAUCUUCGAUCACUACGCAUGCACGGACACAAGUUUCAGCUCGCAUGGUCCUGUUCCACUGUGCGCAGCAUCCACGAUAGAGUUGUUUUCGAGCAGAUUGCGUAAAUACCCAUCCAUCGGUCGGUCUGACUGGACCCCCCUGGGGCGCAUGCGGGGAUCGGGACUCUAUUCACCGGGCCUGGUGUUGGCAAGCCUGCUUACUCGGAACUCAGCUGCCUUGGAACGGGCGAUGCUAAGGAUCAUUGCCUCAGUGCUAGAACGGGGGUACAGCUUGAAGCAAAGGGCGUCCCAGCUAAUGCGCCAGAAAGUAGUGUGGGUUAGCAGCGAACAAGUAAUCCACGGAUUUCUGAGGAGGGAACAAAAAGCCGGUAUAGCCGAAUCGCAGGCUCUCGUCUUCAAGUCGUUUCAUCCAAGCAAACUUGCUGAAGCCAUGCUAAGCGAAUAUCUUAUACCGCCGUAUUCCGACGCUAAACAGCGGACUACUUUAAUUGGUACUGUUGACGAGGAGGCUCACGUGAUAACUCUUGAUGUGAUUCACCGGGAAUUGUCAGGGAAGGACGCCAUGACAAGCAUACGUUCGUAUAAACGAGCUAACGGGAUCUUUAUCUCAACCGGGACGGCGAAUCACGCCUAUUACCUGAUUGAGACAUUUAUCGGCAUUCAGAGCCCCGCCGGGUUAAUACCGCAAUGGUACUGGAGGUGCUGUCGGCGCCACGCCUGUGAGCAACCUAGCGAAAGGGCUAAUGCGUUCUCCGUGGGUAUCUUGGCAGGUCGGCAAGAGAGCAACGAAUACUGUGGUCACCAACACAAGGCGGCCAUUACACGACCCCAAAACUAA\n";
        System.out.println(RNAtoProtein(s));
    }

    public static String RNAtoProtein(String RNA){
        StringBuilder protein = new StringBuilder();
        String[] RNAarray = RNA.split("(?<=\\G...)");
        boolean term = false;
        for (String sub : RNAarray) {
            if(!term) {
                switch (sub) {
                    case "UUU":
                        protein.append("F");
                        break;
                    case "UUC":
                        protein.append("F");
                        break;
                    case "UUA":
                        protein.append("L");
                        break;
                    case "UUG":
                        protein.append("L");
                        break;
                    case "UCU":
                        protein.append("S");
                        break;
                    case "UCC":
                        protein.append("S");
                        break;
                    case "UCA":
                        protein.append("S");
                        break;
                    case "UCG":
                        protein.append("S");
                        break;
                    case "UAU":
                        protein.append("Y");
                        break;
                    case "UAC":
                        protein.append("Y");
                        break;
                    case "UAA":
                        term = true;
                        break;
                    case "UAG":
                        term = true;
                        break;
                    case "UGU":
                        protein.append("C");
                        break;
                    case "UGC":
                        protein.append("C");
                        break;
                    case "UGA":
                        term = true;
                        break;
                    case "UGG":
                        protein.append("W");
                        break;
                    case "CUU":
                        protein.append("L");
                        break;
                    case "CUC":
                        protein.append("L");
                        break;
                    case "CUA":
                        protein.append("L");
                        break;
                    case "CUG":
                        protein.append("L");
                        break;
                    case "CCU":
                        protein.append("P");
                        break;
                    case "CCC":
                        protein.append("P");
                        break;
                    case "CCA":
                        protein.append("P");
                        break;
                    case "CCG":
                        protein.append("P");
                        break;
                    case "CAU":
                        protein.append("H");
                        break;
                    case "CAC":
                        protein.append("H");
                        break;
                    case "CAA":
                        protein.append("Q");
                        break;
                    case "CAG":
                        protein.append("Q");
                        break;
                    case "CGU":
                        protein.append("R");
                        break;
                    case "CGC":
                        protein.append("R");
                        break;
                    case "CGA":
                        protein.append("R");
                        break;
                    case "CGG":
                        protein.append("R");
                        break;
                    case "AUU":
                        protein.append("I");
                        break;
                    case "AUC":
                        protein.append("I");
                        break;
                    case "AUA":
                        protein.append("I");
                        break;
                    case "AUG":
                        protein.append("M");
                        break;
                    case "ACU":
                        protein.append("T");
                        break;
                    case "ACC":
                        protein.append("T");
                        break;
                    case "ACA":
                        protein.append("T");
                        break;
                    case "ACG":
                        protein.append("T");
                        break;
                    case "AAU":
                        protein.append("N");
                        break;
                    case "AAC":
                        protein.append("N");
                        break;
                    case "AAA":
                        protein.append("K");
                        break;
                    case "AAG":
                        protein.append("K");
                        break;
                    case "AGU":
                        protein.append("S");
                        break;
                    case "AGC":
                        protein.append("S");
                        break;
                    case "AGA":
                        protein.append("R");
                        break;
                    case "AGG":
                        protein.append("R");
                        break;
                    case "GUU":
                        protein.append("V");
                        break;
                    case "GUC":
                        protein.append("V");
                        break;
                    case "GUA":
                        protein.append("V");
                        break;
                    case "GUG":
                        protein.append("V");
                        break;
                    case "GCU":
                        protein.append("A");
                        break;
                    case "GCC":
                        protein.append("A");
                        break;
                    case "GCA":
                        protein.append("A");
                        break;
                    case "GCG":
                        protein.append("A");
                        break;
                    case "GAU":
                        protein.append("D");
                        break;
                    case "GAC":
                        protein.append("D");
                        break;
                    case "GAA":
                        protein.append("E");
                        break;
                    case "GAG":
                        protein.append("E");
                        break;
                    case "GGU":
                        protein.append("G");
                        break;
                    case "GGC":
                        protein.append("G");
                        break;
                    case "GGA":
                        protein.append("G");
                        break;
                    case "GGG":
                        protein.append("G");
                        break;
                }
            }
            else{
                return protein.toString();
            }
        }
        return protein.toString();
    }

    public static ArrayList<Integer> substringPositions(String DNA, String sub){
        ArrayList<Integer> indexes = new ArrayList<>();

        for(int i=0; i<DNA.length()-sub.length(); i++){
            boolean term = true;

            if(DNA.charAt(i) == sub.charAt(0)){
                for(int j=1; j<sub.length(); j++){
                    if(DNA.charAt(i + j) != sub.charAt(j)) {
                        term = false;
                    }
                }
            }
            if(DNA.charAt(i) == sub.charAt(0) && term == true){
                indexes.add(i+1);
            }
        }

        return indexes;
    }

    public static int HammingDistance(String s, String t){
        int dist = 0;

        if(s.length() != t.length())
            return -1; //return -1 if DNAs have differente lengths
        for (int i=0; i<s.length(); i++){
            if(s.charAt(i) != t.charAt(i)){
                dist++;
            }
        }

        return dist;
    }

    public static char[] Reverse(String t){
        char[] tArr = t.toCharArray();
        int low = 0;
        int high = tArr.length;
        while(low < high){
            char temp = tArr[low];
            tArr[low] = tArr[high-1];
            tArr[high-1] = temp;
            low++;
            high--;
        }
        return tArr;
    }

    public static String ReverseCompliment(String t){
        char[] reversed = Reverse(t);
        for(int i=0; i<reversed.length; i++){
            if(reversed[i] == 'A'){
                reversed[i] = 'T';
            }
            else if(reversed[i] == 'T'){
                reversed[i] = 'A';
            }
            else if(reversed[i] == 'C'){
                reversed[i] = 'G';
            }
            else if(reversed[i] == 'G'){
                reversed[i] = 'C';
            }
        }
        return new String(reversed);
    }

    public static String RNA(String t) {
        String newt = t.replace('T', 'U');
        return newt;
    }
}
